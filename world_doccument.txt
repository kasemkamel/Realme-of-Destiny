# لعبة MMO الاستراتيجية ثنائية الأبعاد

## 📋 الوصف
لعبة استراتيجية متعددة اللاعبين عبر الإنترنت تعتمد على بناء الإمبراطوريات والسيطرة على المقاطعات وبناء المدن. تعمل اللعبة ببنية Client-Server باستخدام Python.

## 🛠️ المتطلبات

### متطلبات السيرفر:
```bash
pip install websockets
```

### متطلبات الكلاينت:
```bash
pip install pygame
pip install websockets
```

## 🚀 التشغيل

### 1. تشغيل السيرفر
احفظ كود السيرفر في ملف `server.py` ثم قم بتشغيله:

```bash
python server.py
```

سترى رسالة:
```
جاري إنشاء خريطة العالم...
تم إنشاء X مقاطعة
السيرفر يعمل على localhost:8765
```

### 2. تشغيل الكلاينت
في نافذة طرفية جديدة، احفظ كود الكلاينت في ملف `client.py` ثم قم بتشغيله:

```bash
python client.py
```

يمكنك تشغيل عدة نوافذ للعبة لمحاكاة عدة لاعبين.

## 🎮 كيفية اللعب

### شاشة خريطة العالم:

#### التحكم بالكاميرا:
- **W** - التحرك للأعلى
- **A** - التحرك لليسار
- **S** - التحرك للأسفل
- **D** - التحرك لليمين

#### إدارة المقاطعات:
1. **انقر** على مقاطعة لتحديدها
2. **اضغط C** للسيطرة على المقاطعة المحددة (المقاطعات غير المملوكة فقط)
3. **اضغط B** لبناء مدينة في المقاطعة المحددة (يجب أن تكون مملوكة لك)

#### الدخول للمدن:
- **انقر** على أيقونة المدينة (الدائرة الذهبية) لفتحها

### شاشة المدينة:

#### بناء المباني:
1. **اضغط رقم** لاختيار نوع المبنى:
   - **1** - ثكنات (Barracks) - لونها أحمر
   - **2** - مزرعة (Farm) - لونها أصفر
   - **3** - سور (Wall) - لونها رمادي
   - **4** - سوق (Market) - لونها أزرق
   - **5** - منجم (Mine) - لونها بني

2. **انقر** على أي خانة في شبكة البناء (15×15) لوضع المبنى

#### العودة لخريطة العالم:
- **ESC** - العودة لخريطة العالم

## 🗺️ أنواع الخانات في الخريطة

| النوع | اللون | الوصف |
|------|------|-------|
| ماء (Water) | أزرق داكن | لا يمكن البناء عليه |
| أرض منبسطة (Flat Land) | أخضر | الأرض الأساسية للبناء |
| جبل (Mountain) | رمادي | عائق طبيعي، لا يمكن البناء |
| مرتفع (High Ground) | بني فاتح | يوفر مزايا دفاعية |

## 📊 موارد اللعبة

كل لاعب يبدأ بـ:
- **1000 ذهب** (Gold)
- **500 طعام** (Food)
- **300 خشب** (Wood)

## 🏗️ البنية التقنية

### السيرفر (server.py):
- **المنفذ الافتراضي**: 8765
- **البروتوكول**: WebSocket
- **الوظائف الرئيسية**:
  - إدارة حالة اللعبة الكاملة
  - معالجة اتصالات متعددة
  - التحقق من صحة الإجراءات
  - توزيع التحديثات للاعبين

### الكلاينت (client.py):
- **المحرك الرسومي**: Pygame
- **الاتصال**: WebSocket Client
- **الوظائف الرئيسية**:
  - عرض الواجهة الرسومية
  - إرسال مدخلات اللاعب
  - استقبال وعرض التحديثات

## 🔧 التخصيص

### تعديل حجم الخريطة:
في `server.py`، عدّل السطر:
```python
server = GameServer(width=40, height=40)
```

### تغيير عنوان السيرفر:
في `client.py`، عدّل السطر:
```python
await client.connect_to_server(host='localhost', port=8765)
```

### تعديل الموارد الابتدائية:
في `server.py`، في دالة `handle_client`:
```python
resources={'gold': 1000, 'food': 500, 'wood': 300}
```

## 🎯 الميزات المتقدمة (للتطوير المستقبلي)

- [ ] نظام القتال بين اللاعبين
- [ ] تجارة الموارد
- [ ] تحالفات بين اللاعبين
- [ ] تطوير المباني
- [ ] إنتاج الموارد من المباني
- [ ] جيوش وحركة القوات
- [ ] نظام البحث والتطوير
- [ ] أحداث عشوائية
- [ ] حفظ واستعادة حالة اللعبة
- [ ] نظام الدردشة

## 🐛 استكشاف الأخطاء

### المشكلة: "Connection refused"
- تأكد من تشغيل السيرفر أولاً
- تحقق من أن المنفذ 8765 غير مستخدم

### المشكلة: الخريطة لا تظهر
- انتظر بضع ثوانٍ حتى يتم استقبال بيانات الخريطة
- تحقق من اتصال الإنترنت إذا كان السيرفر على جهاز آخر

### المشكلة: pygame لا يعمل
تأكد من تثبيت pygame بشكل صحيح:
```bash
pip install --upgrade pygame
```

## 📝 ملاحظات تطويرية

### هيكل الرسائل (WebSocket):

#### من الكلاينت للسيرفر:
```json
{
  "action": "connect|claim_province|build_city|build_building",
  "player_id": "string",
  ...
}
```

#### من السيرفر للكلاينت:
```json
{
  "type": "world_state|city_data",
  "data": {...}
}
```

## 👥 المساهمة
اللعبة مفتوحة المصدر ويمكن التطوير عليها. بعض الاقتراحات للمساهمة:
- تحسين الرسوميات والواجهة
- إضافة تأثيرات صوتية
- تطوير الذكاء الاصطناعي للاعبين
- تحسين الأداء وتحسين الشبكة

## 📄 الترخيص
هذا المشروع تعليمي ومفتوح للاستخدام والتطوير.

---

**استمتع ببناء إمبراطوريتك! 🏰**